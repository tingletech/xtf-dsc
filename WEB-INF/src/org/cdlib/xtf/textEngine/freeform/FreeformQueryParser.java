/* Generated By:JavaCC: Do not edit this line. FreeformQueryParser.java */

/* 2009/7/24 - MAR - Add code to post-process queries in an attempt to do a
 *		better job of handling query components of the form
 *		"field:value".  If no query component has that form, no
 *		changes are made.
 *
 *		If a query component of the form "field:value" is present,
 *		then examine all query components of that form.  If all of
 *		them refer to a "field" that is not the name of a Dublin
 *		Core element we use, then none of them will yield any
 *		results.  We therefore change all such query components
 *		as if the ":" were not present.
 *
 *		If any of the "field:value" query components refer to a
 *		"field" that *is* the name of a Dublin Core element we use,
 *		then we duplicate the query, change the duplicate so that the
 *		":"s are present, and combine the original query and the
 *		duplicate query with "OR".
 */

/* 2009/7/29 - MAR - Remove some exception throwing, because it generates a
 *		stack trace for the user.  Better to just accept what we have
 *		parsed so far.
 */

/* 2009/8/4 - MAR - By removing the exception throwing, we can be left with
 *		empty query items.  For example, the query:
 *			jones"
 *		yields an empty "<phrase>".  Add coded to "fixDC( )", which
 *		always removes empty "<phrase>"s from the query.  Do this
 *		at the beginning, before checking for colons.
 */

/* 2009/8/6 - MAR - We also support "title" as a DC field.  */

/* 2009/8/7 - MAR - There appears to be a bug in method "resolveFields( )".
 *		The query "(date:2009 AND wolf) OR horse" generates
 *		This query
 *			<query>
 *			  <or field="serverChoice">
 *			    <and field="date">
 *			      <term>2009</term>
 *			      <term>wolf</term>
 *			    </and>
 *			    <term>horse</term>
 *			  </or>
 *			</query>
 *		which gives servlet error "cannot override ancestor 'field'
 *		attribute".  It appears that in any traversal, from the root
 *		to a leaf of the query tree (excluding "<allDocs>"), there
 *		must be exactly one element with a "field" attribute.
 */

/* 2009/8/8 - MAR - I'm getting the diagnostic "Interal error:  sub-queries
 *		of multi-field query must be span queires".  The "serverChoice"
 *		thing is getting replaced, during the XSLT processing, with
 *		the list of all possible fields.  So, it sounds like it might
 *		be better to put "serverChoice" as far down in the tree as
 *		possible (to avoid sub-queries of multi-field queries),
 *		instead of as high up in the tree as possible.
 */

/* 2009/8/11 - MAR - Putting "serverChoice" as low as possible appears to have
 *		worked well.  Except for on "<phrase>"s.  This freeform
 *		query:
 *			"local history photograph collection"
 *		is translated to this "<query>":
 *			<query>
 *			  <phrase>
 *			    <term field="serverChoice">local</term>
 *			    <term field="serverChoice">history</term>
 *			    <term field="serverChoice">title</term>
 *			    <term field="serverChoice">collection</term>
 *			  </phrase>
 *			</query>
 *		but that's getting the error:
 *			'term' element requires 'field' attribute on itself or an ancestor
 *		So, it appears that, for a "<phrase>", the
 *		'field="serverChoice"' must be on it.  Putting a colon between
 *		the quote marks does not result in a "field" attribute:
 *		This query:
 *			"local history title:collection"
 *		yields:
 *			<query>
 *			  <phrase>
 *			    <term field="serverChoice">local</term>
 *			    <term field="serverChoice">history</term>
 *			    <term field="serverChoice">title</term>
 *			    <term field="serverChoice">collection</term>
 *			  </phrase>
 *			</query>
 *		so, it appears to be safe to move the 'field="serverChoice"'
 *		from the "<term>"s to the "<phrase>".
 */

package org.cdlib.xtf.textEngine.freeform;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.ArrayList;

import javax.xml.transform.stream.StreamSource;

import net.sf.saxon.om.NodeInfo;
import net.sf.saxon.tinytree.TinyBuilder;
import net.sf.saxon.trans.XPathException;

/** 
 * A grammar-based parser for "freeform queries", constructed with JavaCC.
 * 
 * Designed to parse a query language much like that supported by "gaggle",
 * a little query language used at CDL, which is in turn designed to act
 * much like Google.
 *
 * <p> Uses a tokenizer that should be good for most European-language queries.
 */
@SuppressWarnings("unused")
public class FreeformQueryParser implements FreeformQueryParserConstants {
  /**
   * Simple command-line test driver.
   */
  public static void main(String[] args) throws IOException
  {
    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
    while (true)
    {
      System.out.print("Enter query: ");
      String text = in.readLine();
      if (text == null || text.length() == 0)
        break;
      FreeformQueryParser parser = new FreeformQueryParser(new StringReader(text));
      try {
        FNode query = parser.Query();
        System.out.println(query.toXML());
      }
      catch (ParseException e) {
        System.out.println("Parse error: " + e);
         
      }
    }
  }

  /**
   * The result of a parse. A very simple hierarchical structure, basically
   * mirroring the XML that would be generated for an XTF query.
   */
  public class FNode
  {
    public String name;  // Name of the element, such as "query", "and", "term", etc.
    public String text;  // Text of a term element
    public String field; // Field name, or null if specified by parent, or "serverChoice"

    public ArrayList<FNode> children = new ArrayList(); // Sub-elements

    /** Private constructor */
    FNode(String n) { name = n; }

    /** Private constructor */
    FNode(String n, String t) { name = n; text = t; }

    /** Generate XML for this node and its descendants. */
    public String toXML()
    {
      StringBuffer buf = new StringBuffer();
      toXML(0, buf);
      return buf.toString();
    }

    /** Workhorse XML generator */
    private void toXML(int level, StringBuffer buf)
    {
      buf.append(indent(level) + "<" + name);
      if (field != null)
        buf.append(" field=\"" + field + "\"");
      if (text != null && children.isEmpty())
        buf.append(">" + text + "</" + name + ">\n");
      else
      {
        buf.append(">\n");
        level++;
        if (text != null)
          buf.append(indent(level) + text + "\n");
        for (FNode kid : children)
          kid.toXML(level, buf);
        --level;
        buf.append(indent(level) + "</" + name + ">\n");
      }
    }

    /** Convert the query to something more compact than XML */
    public String toString()
    {
      StringBuffer buf = new StringBuffer();
      buf.append(name + "(");
      if (field != null)
        buf.append(field + ": ");
      if (text != null)
        buf.append("\"" + text + "\"");
      boolean first = true;
      for (FNode kid : children) {
        if (!first)
          buf.append(", ");
        first = false;
        buf.append(kid.toString());
      }
      buf.append(")");
      return buf.toString();
    }

    /** Return a string with two spaces per level, used for indenting XML. */
    private String indent(int level)
    {
      StringBuffer buf = new StringBuffer();
      for (int i=0; i<level; i++)
        buf.append("  ");
      return buf.toString();
    }

    /** Add a child to this node */
    private void add(FNode n)
    {
      children.add(n);
    }

    /** If we only have one child, return it. Else, return 'this'. */
    private FNode promoteSingle()
    {
      if (children.size() == 1)
        return children.get(0);
      return this;
    }

    /* Remove all 'field="serverChoice"' attributes.  */
    private void clearServerChoiceFields( ) {
	/* If there is a 'field="serverChoice"' attribute in this element,
	 * clear it.
	 */
	if ((field != null) && field.equals("serverChoice")) field = null;

	/* Recurse, doing the same for all our children.  */
	for (FNode kid : children)
		kid.clearServerChoiceFields( );
	}

//    /* Determine if any descendant has a "field" attribute.  */
//    private boolean descendantHasFieldAttribute( ) {
//	for (FNode kid : children) {
//		if (kid.field != null) return true;
//		if (kid.descendantHasFieldAttribute( )) return true;
//		}
//	return false;
//	}

    /* Move the 'field="serverChoice"' from the "<term>"s in a "<phrase>", to
     * the "<phrase>" itself.
     */
    private void fixPhrase( ) {
	/* If this node is not a "<phrase>", leave it alone, except for
	 * recursing into its children.
	 */
	if (! name.equals("phrase")) {
		for (FNode kid : children)
			kid.fixPhrase( );
		return;
		}

	/* This is a "<phrase>".  I expect that its children will all be
	 * "<term>"s without children.  If that's not the case, then
	 * don't attempt a fix, and let things fail the would have.
	 */

	/* If there are no children, leave things as they are.  */
	if (children.size( ) == 0) return;

	/* Make sure all children are "<term>"s, and they all have
	 * no field attribute, or have 'field="serverChoice"', and
	 * have no children.
	 */
	boolean allAreTermsWithServerChoiceAndNoChildren = true;
	for (FNode kid : children) {
		if (! kid.name.equals("term")) {
			allAreTermsWithServerChoiceAndNoChildren = false;
			break;
			}
		if (kid.field == null) continue;
		if (! kid.field.equals("serverChoice")) {
			allAreTermsWithServerChoiceAndNoChildren = false;
			break;
			}
		if (kid.children.size( ) != 0)  {
			allAreTermsWithServerChoiceAndNoChildren = false;
			break;
			}
		}

	/* If all children are "<terms>" with no field attribute or
	 * have 'field="serverChoice"', and have no children, then move
	 * 'field="serverChoice"' from the children to the "<phrase>".
	 */
	if (allAreTermsWithServerChoiceAndNoChildren) {
		field = "serverChoice";
		for (FNode kid : children)
			kid.field = null;
		}
	/* Otherwise, recurse and process the children.  */
	else {
		for (FNode kid : children)
			kid.fixPhrase( );
		}

	/* All done.  */
	return;
	}

    /* Repair the "field" attributes.  */
    private void resolveFields(int level) {
	/* If we're at the top level, start off by clearing all
	 * 'field="serverChoice"' attributes.  Also, we don't add the
	 * 'field="serverChoice"' atrribute at the top level, i.e., on the
	 * "<query>", so only do that to the children of the "<query>".
	 */
	if (level == 0) {
		clearServerChoiceFields( );
                /* Hmmm.  Even though we're at the top level, we might not
		 * be in a "<query>".  If we're not in a "<query>", then
		 * proceed as if we weren't at the top level.  If we are
		 * at the top level at a "<query>", do the "resolveFields( )"
		 * only on the children.
		 */
		if (name.equals("query")) {
			for (FNode kid : children)
				kid.resolveFields(level + 1);

			/* Move the 'field="serverChoice"' from the "<term>"s
			 * in a "<phrase>", to the "<phrase>" itself.
			 */
			fixPhrase( );

			return;
			}
		}

	/* If this is an "<allDocs>" node, we ignore it.  */
	if (name.equals("allDocs")) return;

	/* If this node has a "field" attribute, I don't think we need to
	 * go any deeper.
	 */
	if (field != null) return;

//	/* If no descendant has a "field" attribute, then we will add one
//	 * here, and we don't need to process our descendants.
//	 *
//	 * Flash:  "field" is apparently only allowed on "term", "and",
//	 * "or", and "phrase".
//	 */
//	if ((! descendantHasFieldAttribute( )) && 
//		(name.equals("term") ||
//		name.equals("and") ||
//		name.equals("or") ||
//		name.equals("phrase"))
//		) {
//		field = "serverChoice";
//		return;
//		}

	/* If we don't have any children, so that we're as deep in the tree
	 * as we can get, then add "field=serverChoice".
	 */
	if (children.size( ) == 0) {
		field = "serverChoice";
		return;
		}

	/* Otherwise, we need to process our descendants.  */
	for (FNode kid : children)
		kid.resolveFields(level + 1);
	}

    /**
     * In XTF, "not" is always implemented as AND-NOT. So make sure that
     * every not is part of an AND, if necessary sticking an <allDocs>
     * query onto it.
     */
    private void fixNots()
    {
      // Recursively fix nots below here
      for (FNode kid : children)
        kid.fixNots();

      // Now scan for unmatched nots at this level
      for (int i = 0; i < children.size(); i++)
      {
        FNode kid = children.get(i);
        if (!kid.name.equals("not"))
          continue;

        // If the parent isn't an "and", change it.
        if (!name.equals("and") && !name.equals("query"))
          name = "and";

        // Within an AND, we check if there's anything else (positive) 
        // with the same field.
        //
        boolean found = false;
        for (FNode k2 : children) {
          if (k2 == kid || k2.name == "not")
            continue;
          if (k2.field == kid.field)
            found = true;
        }

        // If nothing to match against, add something.
        if (!found) {
          FNode all = new FNode("allDocs");
          FNode and = new FNode("and");
          and.add(all);
          and.add(kid);
          children.set(i, and);
        }
      }
    }

    // 2009/7/24 - MAR - Post-process queries in an attempt to do a better
    //		job of handling query components of the form "field:value".
    private FNode fixDC( ) {
	/* Interrupting the parser without letting it throw exceptions,
	 * can result in empty items.  For example, the query:
	 *	jones"
	 * results in an empty "<phrase>".  Remove empty "<phrase>"s.
	 */
	removeEmptyPhrase( );

	/* Scan the query for components of the form "field:value".  If we
	 * find none, make no changes to the query.  If we find at least one,
	 * and all of them have "field"s which are not our DC, change the
	 * query so that the ":"s are not present.  If we find at least one
	 * that has a "field" which *is* our DC, duplicate the query, change
	 * the duplicate so that the ":"s are not present, and combine the
	 * original and the duplicate with "OR".
	 */
	int i = surveyDC( );

	/* If this query contains no "field:value" components, we don't need
	 * to change it.  Return it as is.
	 */
	if (i == 0) return(this);

	/* We need to duplicate the query, making the change of all
	 * "field:value" components as if the colon was not there.  That
	 * is, both "field" and "value" become terms.
	 */
	FNode dupQuery = copyAndChangeQuery( );

	/* Fix up the "field" attributes in the duplicate query.  */
	dupQuery.resolveFields(0);

	/* If all of the "field:values" were not our DC, then return the
	 * copy.
	 */
	if (i == 1) return(dupQuery);

	/* There is at least one "field:value", and one is our DC.
	 * "OR" the original query and the duplicate together.
	 */

	/* If there is more than one child of the "<query>" of the
	 * original, put an "AND" around them to turn them into a
	 * single node.
	 */
	FNode newNode;
	if (children.size( ) > 1) {
		newNode = new FNode("and");
		newNode.children = children;
		children = new ArrayList( );
		add(newNode);
		}

	/* Do the same for the duplicate query.  */
	if (dupQuery.children.size( ) > 1) {
		newNode = new FNode("and");
		newNode.children = dupQuery.children;
		dupQuery.children = new ArrayList( );
		dupQuery.add(newNode);
		}

	/* Create an "<or>", and make these both children of it.  */
	newNode = new FNode("or");
	newNode.field = "serverChoice";
	newNode.add(children.get(0));
	newNode.add(dupQuery.children.get(0));

	/* Create a new "<query>" to hold the "<or>".  */
	FNode newQuery = new FNode("query");
	newQuery.add(newNode);

	/* Fix up the "field" attributes in the resulting query.  */
	newQuery.resolveFields(0);

	/* Return the modified original query.  */
	return(newQuery);
	}

    /* The list of our DC.  */
//    private final String[ ] ourDC = {"identifier", "title", "creator",
//	"date", "description", "language", "subject", "coverage", "type",
//	"format", "relation", "publisher", "contributor"};
    private final String[ ] ourDC = {"subject", "publisher", "title"};

    private int surveyDC( ) {
	/* Return 0 = mean that this query contains no "field:value" components
	 *	  1 = all "field:value" components do not use our DC
	 *	  2 = there is at least one "field:value" that uses our DC
	 */

	int i;
	boolean isAmongOurDC;
	int countAllNotOurDC = 0;

	/* If this node has a "field", check its value.  field=serverChoice is
	 * the same as not having a "field".
	 */
	if ((field != null) && (! field.equals("serverChoice"))) {
		/* We have a "field".  See if it is among our DC.  */
		isAmongOurDC = false;
		for (i = 0; i < ourDC.length; i++)
			if (field.equals(ourDC[i])) {
				isAmongOurDC = true;
				break;
				}

		/* If it is among our DC, then we know how to respond for
		 * this node:  value 2.
		 */
		if (isAmongOurDC) return(2);

		/* If this is is not among our DC, then add one to the
		 * count of children for which all "field:value" are not
		 * our DC, as if this was one of our children.
		 */
		countAllNotOurDC = 1;
		}

	/* Now, survey our children.  If we find one that says that it has
	 * a "field:value" that is our DC, then we are too.  Otherwise,
	 * count the ones for which there is at least one "field:value",
	 * and all "field:value"s are not our DC.
	 */
	for (FNode kid : children) {
		/* Survey this kid.  */
		i = kid.surveyDC( );

		/* If this kid has a field which is our DC, then we do too,
		 * and there's no need to look at any further kids.
		 */
		if (i == 2) return(2);

		/* Either this kid has no "field:value"s in it (i == 0), or
		 * all "field:value"s are not our DC (i == 1).  Count the
		 * number of kids that do have "field:value"s that are not
		 * our DC.
		 */
		countAllNotOurDC += i;
		}

	/* If "countAllNotOurDC" is zero, then this node, and all of its kids
	 * have no "field:value"s, so we know how to respond (with value 0).
	 * If "countAllNotOurDC" is not zero, then there is at least one
	 * "field:value" somewhere, but all of them are not our DC (response
	 * 1).
	 */
	if (countAllNotOurDC == 0) return(0);
	else return(1);
	}

    /* Method to copy a query and change the copy as if no "field:value"
     * component had been specified.  That is, rewrite it as if the colon
     * were not present.  (Don't copy "field=serverChoice".)
     */
    private FNode copyAndChangeQuery( ) {
	FNode newFNode;
	FNode newTerm;

	/* Do we have "field" = something (besides "serverChoice") here?  */
	if ((field != null) && (! field.equals("serverChoice"))) {
		/* Yes.  Create a new "AND", and turn this "field" into a
		 * "term" that goes into the "AND".
		 */
		newFNode = new FNode("and");
		newFNode.add(new FNode("term", field));

		/* If this one has text in it, turn that into a term too,
		 * and add it to the list of things we're "AND"-ing.
		 */
		if ((text != null) && (text.length( ) != 0))
			newFNode.add(new FNode("term", text));
		}

	else
		/* No.  Just copy the node.  */
		newFNode = new FNode(name, text);

	/* Add converted copies of all the children.  */
	for (FNode kid : children)
		newFNode.add(kid.copyAndChangeQuery( ));

	/* Return the new node.  */
	return(newFNode);
	}

    /* Method to remove empty "<phrase>"s from a query.  */
    private void removeEmptyPhrase( ) {
	int i;
	FNode kid;

	/* Walk the children, looking for empty "<phrase>"s.  */
	for (i = 0; i < children.size( ); i++) {
		/* Fetch the "i"th kid.  */
		kid = children.get(i);

		/* If this child doesn't have a name (!), or the name is
		 * not "phrase", look at the next one.
		 */
		if ((kid.name == null) || (! kid.name.equals("phrase")))
			continue;

		/* If this child's phrase has text in it, it's not empty,
		 * so move on.
		 */
		if ((kid.text != null) && (kid.text.length( ) != 0))
			continue;

		/* If this child has children, then it's not empty, so
		 * move on.
		 */
		if ((kid.children != null) && (kid.children.size( ) != 0))
			continue;

		/* We have an empty "<phrase>", which needs to be removed.  */
		children.remove(i);

		/* The "remove( )" method, shifts all entries after this
		 * one down by one.  So, the one after the one removed
		 * now has index "i".  If we just "continue" the loop, the
		 * next one we'll look at will be "i + 1".  Therefore, we
		 * must subtract 1 from "i", so that the next one we look
		 * at will be the "i"th one.
		 */
		i--;
		}

	/* Recursively process the children the same way.  */
	for (i = 0; i < children.size( ); i++)
		children.get(i).removeEmptyPhrase( );
	}
  }

/*****************************************************************************
 * Parser begins here. The grammar builds from the bottom up, beginning with
 * a Term, followed by things that use Term, etc. The root of the grammar
 * is Query, at the very end.
 ****************************************************************************/

/**
 * In general a term is just a single word. But it can also be an email
 * address, symbol, number, etc.
 */
  final public FNode Term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASIC:
      jj_consume_token(BASIC);
      break;
    case APOSTROPHE:
      jj_consume_token(APOSTROPHE);
      break;
    case ACRONYM:
      jj_consume_token(ACRONYM);
      break;
    case COMPANY:
      jj_consume_token(COMPANY);
      break;
    case EMAIL:
      jj_consume_token(EMAIL);
      break;
    case HOST:
      jj_consume_token(HOST);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    case SYMBOL:
      jj_consume_token(SYMBOL);
      break;
    case CJK:
      jj_consume_token(CJK);
      break;
//    default:
//      jj_la1[0] = jj_gen;
//      jj_consume_token(-1);
//      throw new ParseException();
    }
    {if (true) return new FNode("term", token.image);}
    throw new Error("Missing return statement in function");
  }

/**
 * A phrase is a quoted string of terms (but we also take care not to barf on
 * reserved words).
 */
  final public FNode Phrase() throws ParseException {
  FNode phrase = new FNode("phrase");
  FNode term;
    jj_consume_token(QUOTE);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case NOT:
      case PLUS:
      case COLON:
      case OPEN_PAREN:
      case CLOSE_PAREN:
      case BASIC:
      case APOSTROPHE:
      case ACRONYM:
      case COMPANY:
      case EMAIL:
      case HOST:
      case NUM:
      case SYMBOL:
      case CJK:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BASIC:
      case APOSTROPHE:
      case ACRONYM:
      case COMPANY:
      case EMAIL:
      case HOST:
      case NUM:
      case SYMBOL:
      case CJK:
        term = Term();
                        phrase.add(term);
        break;
      case AND:
      case OR:
      case NOT:
      case PLUS:
      case COLON:
      case OPEN_PAREN:
      case CLOSE_PAREN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          jj_consume_token(AND);
          break;
        case OR:
          jj_consume_token(OR);
          break;
        case NOT:
          jj_consume_token(NOT);
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case COLON:
          jj_consume_token(COLON);
          break;
        case OPEN_PAREN:
          jj_consume_token(OPEN_PAREN);
          break;
        case CLOSE_PAREN:
          jj_consume_token(CLOSE_PAREN);

          break;
//        default:
//          jj_la1[2] = jj_gen;
//          jj_consume_token(-1);
//          throw new ParseException();
        }
        break;
//      default:
//        jj_la1[3] = jj_gen;
//        jj_consume_token(-1);
//        throw new ParseException();
      }
    }
    jj_consume_token(QUOTE);
    {if (true) return phrase;}
    throw new Error("Missing return statement in function");
  }

/**
 * You can stick "not" in front of something to negate it. There is post-
 * processing in the Query() production (at the end) to guarantee that each
 * NOT is actually part of an AND-NOT.
 */
  final public FNode Not() throws ParseException {
  FNode node;
  FNode kid;
    jj_consume_token(NOT);
    kid = Component();
    // Handle double-not
    if (kid.name == "not") {
      assert kid.children.size() == 1;
      {if (true) return kid.children.get(0);}
    }
    node = new FNode("not");
    node.add(kid);
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/**
 * We allow parenthesized sub-expressions for grouping
 */
  final public FNode ParenSeq() throws ParseException {
  FNode node;
    jj_consume_token(OPEN_PAREN);
    node = SubQuery();
    jj_consume_token(CLOSE_PAREN);
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/**
 * A component of a query is a phrase, term, parenthesized sequence, or a
 * "not" clause. It can be preceded by an optional field specification.
 */
  final public FNode Component() throws ParseException {
  String field = null;
  FNode node;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(PLUS);

    }
    label_3:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_3;
      }
      node = Term();
      jj_consume_token(COLON);
      field = node.text;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTE:
      node = Phrase();
      break;
    case BASIC:
    case APOSTROPHE:
    case ACRONYM:
    case COMPANY:
    case EMAIL:
    case HOST:
    case NUM:
    case SYMBOL:
    case CJK:
      node = Term();
      break;
    case OPEN_PAREN:
      node = ParenSeq();
      break;
    case NOT:
      node = Not();
      break;
    default:
//      jj_la1[5] = jj_gen;
//      jj_consume_token(-1);
//      throw new ParseException();
      node = new FNode("term", "");
    }
    if (field != null)
      node.field = field;
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/**
 * A sequence of components, separated by "OR" or "|"
 */
  final public FNode ORs() throws ParseException {
  FNode node = new FNode("or");
  FNode kid;
    kid = Component();
                        node.add(kid);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      kid = Component();
                        node.add(kid);
    }
    {if (true) return node.promoteSingle();}
    throw new Error("Missing return statement in function");
  }

/**
 * A sequence of terms (optionally separated by "AND" or "&") is AND-ed together.
 * As in Google, "AND" binds more loosely than "OR", so that A AND B OR C should
 * be grouped like this: A AND (B OR C).
 */
  final public FNode ANDs() throws ParseException {
  FNode node = new FNode("and");
  FNode kid;
    kid = ORs();
                node.add(kid);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case NOT:
      case PLUS:
      case QUOTE:
      case OPEN_PAREN:
      case BASIC:
      case APOSTROPHE:
      case ACRONYM:
      case COMPANY:
      case EMAIL:
      case HOST:
      case NUM:
      case SYMBOL:
      case CJK:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_6;
        }
        jj_consume_token(AND);
      }
      kid = ORs();
                  node.add(kid);
    }
    {if (true) return node.promoteSingle();}
    throw new Error("Missing return statement in function");
  }

/**
 * A single sub-query (can be contained in a paren expr) 
 */
  final public FNode SubQuery() throws ParseException {
  FNode node;
    node = ANDs();
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/**
 * The entire query, which consists of a single sub-query. We apply additional
 * processing to ensure proper structure.
 */
  final public FNode Query() throws ParseException {
  FNode sub;
    sub = SubQuery();
    // Create the final wrapper node.
    FNode query = new FNode("query");
    query.add(sub);

    // Propagate field names from left to right, and from children to parent.
    // Also assign "serverChoice" at the highest level we're forced to.
    //
    query.resolveFields(0);

    // Guarantee that every NOT is part of a AND-NOT
    query.fixNots();

    // 2009/7/24 - MAR - Post-process queries in an attempt to do a better
    //		job of handling query components of the form "field:value".
    query = query.fixDC( );

    // All done!
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  public FreeformQueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x41fe00,0x41ffde,0x1de,0x41ffde,0x10,0x41fea8,0x4,0x41feba,0x2,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public FreeformQueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public FreeformQueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FreeformQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FreeformQueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FreeformQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FreeformQueryParser(FreeformQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(FreeformQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
//    token = oldToken;
//    jj_kind = kind;
//    throw generateParseException();
    return(new Token( ));
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[25];
    for (int i = 0; i < 25; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
