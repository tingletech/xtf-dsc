/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2001 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" and
 *    "Apache Lucene" must not be used to endorse or promote products
 *    derived from this software without prior written permission. For
 *    written permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    "Apache Lucene", nor may "Apache" appear in their name, without
 *    prior written permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

/* 2009/7/24 - MAR - Add code to post-process queries in an attempt to do a
 *		better job of handling query components of the form
 *		"field:value".  If no query component has that form, no
 *		changes are made.
 *
 *		If a query component of the form "field:value" is present,
 *		then examine all query components of that form.  If all of
 *		them refer to a "field" that is not the name of a Dublin
 *		Core element we use, then none of them will yield any
 *		results.  We therefore change all such query components
 *		as if the ":" were not present.
 *
 *		If any of the "field:value" query components refer to a
 *		"field" that *is* the name of a Dublin Core element we use,
 *		then we duplicate the query, change the duplicate so that the
 *		":"s are present, and combine the original query and the
 *		duplicate query with "OR".
 */

/* 2009/8/4 - MAR - By removing the exception throwing, we can be left with
 *		empty query items.  For example, the query:
 *			jones"
 *		yields an empty "<phrase>".  Add coded to "fixDC( )", which
 *		always removes empty "<phrase>"s from the query.  Do this
 *		at the beginning, before checking for colons.
 */

/* 2009/8/6 - MAR - We also support "title" as a DC field.  */

/* 2009/8/7 - MAR - There appears to be a bug in method "resolveFields( )".
 *		The query "(date:2009 AND wolf) OR horse" generates
 *		This query
 *			<query>
 *			  <or field="serverChoice">
 *			    <and field="date">
 *			      <term>2009</term>
 *			      <term>wolf</term>
 *			    </and>
 *			    <term>horse</term>
 *			  </or>
 *			</query>
 *		which gives servlet error "cannot override ancestor 'field'
 *		attribute".  It appears that in any traversal, from the root
 *		to a leaf of the query tree (excluding "<allDocs>"), there
 *		must be exactly one element with a "field" attribute.
 */

/* 2009/8/8 - MAR - I'm getting the diagnostic "Interal error:  sub-queries
 *		of multi-field query must be span queires".  The "serverChoice"
 *		thing is getting replaced, during the XSLT processing, with
 *		the list of all possible fields.  So, it sounds like it might
 *		be better to put "serverChoice" as far down in the tree as
 *		possible (to avoid sub-queries of multi-field queries),
 *		instead of as high up in the tree as possible.
 */

/* 2009/8/11 - MAR - Putting "serverChoice" as low as possible appears to have
 *		worked well.  Except for on "<phrase>"s.  This freeform
 *		query:
 *			"local history photograph collection"
 *		is translated to this "<query>":
 *			<query>
 *			  <phrase>
 *			    <term field="serverChoice">local</term>
 *			    <term field="serverChoice">history</term>
 *			    <term field="serverChoice">title</term>
 *			    <term field="serverChoice">collection</term>
 *			  </phrase>
 *			</query>
 *		but that's getting the error:
 *			'term' element requires 'field' attribute on itself or an ancestor
 *		So, it appears that, for a "<phrase>", the
 *		'field="serverChoice"' must be on it.  Putting a colon between
 *		the quote marks does not result in a "field" attribute:
 *		This query:
 *			"local history title:collection"
 *		yields:
 *			<query>
 *			  <phrase>
 *			    <term field="serverChoice">local</term>
 *			    <term field="serverChoice">history</term>
 *			    <term field="serverChoice">title</term>
 *			    <term field="serverChoice">collection</term>
 *			  </phrase>
 *			</query>
 *		so, it appears to be safe to move the 'field="serverChoice"'
 *		from the "<term>"s to the "<phrase>".
 */

options {
  STATIC = false;
  UNICODE_INPUT = true;
}
PARSER_BEGIN(FreeformQueryParser)

package org.cdlib.xtf.textEngine.freeform;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.ArrayList;

import javax.xml.transform.stream.StreamSource;

import net.sf.saxon.om.NodeInfo;
import net.sf.saxon.tinytree.TinyBuilder;
import net.sf.saxon.trans.XPathException;

/** 
 * A grammar-based parser for "freeform queries", constructed with JavaCC.
 * 
 * Designed to parse a query language much like that supported by "gaggle",
 * a little query language used at CDL, which is in turn designed to act
 * much like Google.
 *
 * <p> Uses a tokenizer that should be good for most European-language queries.
 */
@SuppressWarnings("unused")
public class FreeformQueryParser 
{
  /**
   * Simple command-line test driver.
   */
  public static void main(String[] args) throws IOException
  {
    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
    while (true)
    {
      System.out.print("Enter query: ");
      String text = in.readLine();
      if (text == null || text.length() == 0)
        break;
      FreeformQueryParser parser = new FreeformQueryParser(new StringReader(text));
      try {
        FNode query = parser.Query();
        System.out.println(query.toXML());
      }
      catch (ParseException e) {
        System.out.println("Parse error: " + e);
      }
    }
  }
  
  /**
   * The result of a parse. A very simple hierarchical structure, basically
   * mirroring the XML that would be generated for an XTF query.
   */
  public class FNode
  {
    public String name;  // Name of the element, such as "query", "and", "term", etc.
    public String text;  // Text of a term element
    public String field; // Field name, or null if specified by parent, or "serverChoice"
    
    public ArrayList<FNode> children = new ArrayList(); // Sub-elements

    /** Private constructor */
    FNode(String n) { name = n; }

    /** Private constructor */
    FNode(String n, String t) { name = n; text = t; }

    /** Generate XML for this node and its descendants. */
    public String toXML()
    {
      StringBuffer buf = new StringBuffer();
      toXML(0, buf);
      return buf.toString();
    }
    
    /** Workhorse XML generator */
    private void toXML(int level, StringBuffer buf)
    {
      buf.append(indent(level) + "<" + name);
      if (field != null)
        buf.append(" field=\"" + field + "\"");
      if (text != null && children.isEmpty())
        buf.append(">" + text + "</" + name + ">\n");
      else
      {
        buf.append(">\n");
        level++;
        if (text != null)
          buf.append(indent(level) + text + "\n");
        for (FNode kid : children)
          kid.toXML(level, buf);
        --level;
        buf.append(indent(level) + "</" + name + ">\n");
      }
    }

    /** Convert the query to something more compact than XML */
    public String toString()
    {
      StringBuffer buf = new StringBuffer();
      buf.append(name + "(");
      if (field != null)
        buf.append(field + ": ");
      if (text != null)
        buf.append("\"" + text + "\"");
      boolean first = true;
      for (FNode kid : children) {
        if (!first)
          buf.append(", ");
        first = false;
        buf.append(kid.toString());
      }
      buf.append(")");
      return buf.toString();
    }
    
    /** Return a string with two spaces per level, used for indenting XML. */
    private String indent(int level)
    {
      StringBuffer buf = new StringBuffer();
      for (int i=0; i<level; i++)
        buf.append("  ");
      return buf.toString();
    }
    
    /** Add a child to this node */
    private void add(FNode n)
    {
      children.add(n);
    }

    /** If we only have one child, return it. Else, return 'this'. */
    private FNode promoteSingle()
    {
      if (children.size() == 1)
        return children.get(0);
      return this;
    }

    /* Remove all 'field="serverChoice"' attributes.  */
    private void clearServerChoiceFields( ) {
	/* If there is a 'field="serverChoice"' attribute in this element,
	 * clear it.
	 */
	if ((field != null) && field.equals("serverChoice")) field = null;

	/* Recurse, doing the same for all our children.  */
	for (FNode kid : children)
		kid.clearServerChoiceFields( );
	}

//    /* Determine if any descendant has a "field" attribute.  */
//    private boolean descendantHasFieldAttribute( ) {
//	for (FNode kid : children) {
//		if (kid.field != null) return true;
//		if (kid.descendantHasFieldAttribute( )) return true;
//		}
//	return false;
//	}

    /* Move the 'field="serverChoice"' from the "<term>"s in a "<phrase>", to
     * the "<phrase>" itself.
     */
    private void fixPhrase( ) {
	/* If this node is not a "<phrase>", leave it alone, except for
	 * recursing into its children.
	 */
	if (! name.equals("phrase")) {
		for (FNode kid : children)
			kid.fixPhrase( );
		return;
		}

	/* This is a "<phrase>".  I expect that its children will all be
	 * "<term>"s without children.  If that's not the case, then
	 * don't attempt a fix, and let things fail the would have.
	 */

	/* If there are no children, leave things as they are.  */
	if (children.size( ) == 0) return;

	/* Make sure all children are "<term>"s, and they all have
	 * no field attribute, or have 'field="serverChoice"', and
	 * have no children.
	 */
	boolean allAreTermsWithServerChoiceAndNoChildren = true;
	for (FNode kid : children) {
		if (! kid.name.equals("term")) {
			allAreTermsWithServerChoiceAndNoChildren = false;
			break;
			}
		if (kid.field == null) continue;
		if (! kid.field.equals("serverChoice")) {
			allAreTermsWithServerChoiceAndNoChildren = false;
			break;
			}
		if (kid.children.size( ) != 0)  {
			allAreTermsWithServerChoiceAndNoChildren = false;
			break;
			}
		}

	/* If all children are "<terms>" with no field attribute or
	 * have 'field="serverChoice"', and have no children, then move
	 * 'field="serverChoice"' from the children to the "<phrase>".
	 */
	if (allAreTermsWithServerChoiceAndNoChildren) {
		field = "serverChoice";
		for (FNode kid : children)
			kid.field = null;
		}
	/* Otherwise, recurse and process the children.  */
	else {
		for (FNode kid : children)
			kid.fixPhrase( );
		}

	/* All done.  */
	return;
	}

    /* Repair the "field" attributes.  */
    private void resolveFields(int level) {
	/* If we're at the top level, start off by clearing all
	 * 'field="serverChoice"' attributes.  Also, we don't add the
	 * 'field="serverChoice"' atrribute at the top level, i.e., on the
	 * "<query>", so only do that to the children of the "<query>".
	 */
	if (level == 0) {
		clearServerChoiceFields( );
                /* Hmmm.  Even though we're at the top level, we might not
		 * be in a "<query>".  If we're not in a "<query>", then
		 * proceed as if we weren't at the top level.  If we are
		 * at the top level at a "<query>", do the "resolveFields( )"
		 * only on the children.
		 */
		if (name.equals("query")) {
			for (FNode kid : children)
				kid.resolveFields(level + 1);

			/* Move the 'field="serverChoice"' from the "<term>"s
			 * in a "<phrase>", to the "<phrase>" itself.
			 */
			fixPhrase( );

			return;
			}
		}

	/* If this is an "<allDocs>" node, we ignore it.  */
	if (name.equals("allDocs")) return;

	/* If this node has a "field" attribute, I don't think we need to
	 * go any deeper.
	 */
	if (field != null) return;

//	/* If no descendant has a "field" attribute, then we will add one
//	 * here, and we don't need to process our descendants.
//	 *
//	 * Flash:  "field" is apparently only allowed on "term", "and",
//	 * "or", and "phrase".
//	 */
//	if ((! descendantHasFieldAttribute( )) && 
//		(name.equals("term") ||
//		name.equals("and") ||
//		name.equals("or") ||
//		name.equals("phrase"))
//		) {
//		field = "serverChoice";
//		return;
//		}

	/* If we don't have any children, so that we're as deep in the tree
	 * as we can get, then add "field=serverChoice".
	 */
	if (children.size( ) == 0) {
		field = "serverChoice";
		return;
		}

	/* Otherwise, we need to process our descendants.  */
	for (FNode kid : children)
		kid.resolveFields(level + 1);
	}

    /**
     * In XTF, "not" is always implemented as AND-NOT. So make sure that
     * every not is part of an AND, if necessary sticking an <allDocs>
     * query onto it.
     */
    private void fixNots()
    {
      // Recursively fix nots below here
      for (FNode kid : children)
        kid.fixNots();

      // Now scan for unmatched nots at this level
      for (int i = 0; i < children.size(); i++)
      {
        FNode kid = children.get(i);
        if (!kid.name.equals("not"))
          continue;
        
        // If the parent isn't an "and", change it.
        if (!name.equals("and") && !name.equals("query"))
          name = "and";

        // Within an AND, we check if there's anything else (positive) 
        // with the same field.
        //
        boolean found = false;
        for (FNode k2 : children) {
          if (k2 == kid || k2.name == "not")
            continue;
          if (k2.field == kid.field)
            found = true;
        }

        // If nothing to match against, add something.
        if (!found) {
          FNode all = new FNode("allDocs");
          FNode and = new FNode("and");
          and.add(all);
          and.add(kid);
          children.set(i, and);
        }
      }
    }

    // 2009/7/24 - MAR - Post-process queries in an attempt to do a better
    //		job of handling query components of the form "field:value".
    private FNode fixDC( ) {
	/* Interrupting the parser without letting it throw exceptions,
	 * can result in empty items.  For example, the query:
	 *      jones"
	 * results in an empty "<phrase>".  Remove empty "<phrase>"s.
	 */
	removeEmptyPhrase( );

	/* Scan the query for components of the form "field:value".  If we
	 * find none, make no changes to the query.  If we find at least one,
	 * and all of them have "field"s which are not our DC, change the
	 * query so that the ":"s are not present.  If we find at least one
	 * that has a "field" which *is* our DC, duplicate the query, change
	 * the duplicate so that the ":"s are not present, and combine the
	 * original and the duplicate with "OR".
	 */
	int i = surveyDC( );

	/* If this query contains no "field:value" components, we don't need
	 * to change it.  Return it as is.
	 */
	if (i == 0) return(this);

	/* We need to duplicate the query, making the change of all
	 * "field:value" components as if the colon was not there.  That
	 * is, both "field" and "value" become terms.
	 */
	FNode dupQuery = copyAndChangeQuery( );

	/* Fix up the "field" attributes in the duplicate query.  */
	dupQuery.resolveFields(0);

	/* If all of the "field:values" were not our DC, then return the
	 * copy.
	 */
	if (i == 1) return(dupQuery);

	/* There is at least one "field:value", and one is our DC.
	 * "OR" the original query and the duplicate together.
	 */

	/* If there is more than one child of the "<query>" of the
	 * original, put an "AND" around them to turn them into a
	 * single node.
	 */
	FNode newNode;
	if (children.size( ) > 1) {
		newNode = new FNode("and");
		newNode.children = children;
		children = new ArrayList( );
		add(newNode);
		}

	/* Do the same for the duplicate query.  */
	if (dupQuery.children.size( ) > 1) {
		newNode = new FNode("and");
		newNode.children = dupQuery.children;
		dupQuery.children = new ArrayList( );
		dupQuery.add(newNode);
		}

	/* Create an "<or>", and make these both children of it.  */
	newNode = new FNode("or");
	newNode.field = "serverChoice";
	newNode.add(children.get(0));
	newNode.add(dupQuery.children.get(0));

	/* Create a new "<query>" to hold the "<or>".  */
	FNode newQuery = new FNode("query");
	newQuery.add(newNode);

	/* Fix up the "field" attributes in the resulting query.  */
	newQuery.resolveFields(0);

	/* Return the modified original query.  */
	return(newQuery);
	}

    /* The list of our DC.  */
//    private final String[ ] ourDC = {"identifier", "title", "creator",
//	"date", "description", "language", "subject", "coverage", "type",
//	"format", "relation", "publisher", "contributor"};
    private final String[ ] ourDC = {"subject", "publisher", "title"};

    private int surveyDC( ) {
	/* Return 0 = mean that this query contains no "field:value" components
	 *	  1 = all "field:value" components do not use our DC
	 *	  2 = there is at least one "field:value" that uses our DC
	 */

	int i;
	boolean isAmongOurDC;
	int countAllNotOurDC = 0;

	/* If this node has a "field", check its value.  field=serverChoice is
	 * the same as not having a "field".
	 */
	if ((field != null) && (! field.equals("serverChoice"))) {
		/* We have a "field".  See if it is among our DC.  */
		isAmongOurDC = false;
		for (i = 0; i < ourDC.length; i++)
			if (field.equals(ourDC[i])) {
				isAmongOurDC = true;
				break;
				}

		/* If it is among our DC, then we know how to respond for
		 * this node:  value 2.
		 */
		if (isAmongOurDC) return(2);

		/* If this is is not among our DC, then add one to the
		 * count of children for which all "field:value" are not
		 * our DC, as if this was one of our children.
		 */
		countAllNotOurDC = 1;
		}

	/* Now, survey our children.  If we find one that says that it has
	 * a "field:value" that is our DC, then we are too.  Otherwise,
	 * count the ones for which there is at least one "field:value",
	 * and all "field:value"s are not our DC.
	 */
	for (FNode kid : children) {
		/* Survey this kid.  */
		i = kid.surveyDC( );

		/* If this kid has a field which is our DC, then we do too,
		 * and there's no need to look at any further kids.
		 */
		if (i == 2) return(2);

		/* Either this kid has no "field:value"s in it (i == 0), or
		 * all "field:value"s are not our DC (i == 1).  Count the
		 * number of kids that do have "field:value"s that are not
		 * our DC.
		 */
		countAllNotOurDC += i;
		}

	/* If "countAllNotOurDC" is zero, then this node, and all of its kids
	 * have no "field:value"s, so we know how to respond (with value 0).
	 * If "countAllNotOurDC" is not zero, then there is at least one
	 * "field:value" somewhere, but all of them are not our DC (response
	 * 1).
	 */
	if (countAllNotOurDC == 0) return(0);
	else return(1);
	}

    /* Method to copy a query and change the copy as if no "field:value"
     * component had been specified.  That is, rewrite it as if the colon
     * were not present.  (Don't copy "field=serverChoice".)
     */
    private FNode copyAndChangeQuery( ) {
	FNode newFNode;
	FNode newTerm;

	/* Do we have "field" = something (besides "serverChoice") here?  */
	if ((field != null) && (! field.equals("serverChoice"))) {
		/* Yes.  Create a new "AND", and turn this "field" into a
		 * "term" that goes into the "AND".
		 */
		newFNode = new FNode("and");
		newFNode.add(new FNode("term", field));

		/* If this one has text in it, turn that into a term too,
		 * and add it to the list of things we're "AND"-ing.
		 */
		if ((text != null) && (text.length( ) != 0))
			newFNode.add(new FNode("term", text));
		}

	else
		/* No.  Just copy the node.  */
		newFNode = new FNode(name, text);

	/* Add converted copies of all the children.  */
	for (FNode kid : children)
		newFNode.add(kid.copyAndChangeQuery( ));

	/* Return the new node.  */
	return(newFNode);
	}

    /* Method to remove empty "<phrase>"s from a query.  */
    private void removeEmptyPhrase( ) {
	int i;
	FNode kid;

	/* Walk the children, looking for empty "<phrase>"s.  */
	for (i = 0; i < children.size( ); i++) {
		/* Fetch the "i"th kid.  */
		kid = children.get(i);

		/* If this child doesn't have a name (!), or the name is
		 * not "phrase", look at the next one.
		 */
		if ((kid.name == null) || (! kid.name.equals("phrase")))
			continue;

		/* If this child's phrase has text in it, it's not empty,
		 * so move on.
		 */
		if ((kid.text != null) && (kid.text.length( ) != 0))
			continue;

		/* If this child has children, then it's not empty, so
		 * move on.
		 */
		if ((kid.children != null) && (kid.children.size( ) != 0))
			continue;

		/* We have an empty "<phrase>", which needs to be removed.  */
		children.remove(i);

		/* The "remove( )" method, shifts all entries after this
		 * one down by one.  So, the one after the one removed
		 * now has index "i".  If we just "continue" the loop, the
		 * next one we'll look at will be "i + 1".  Therefore, we
		 * must subtract 1 from "i", so that the next one we look
		 * at will be the "i"th one.
		 */
		i--;
		}

	/* Recursively process the children the same way.  */
	for (i = 0; i < children.size( ); i++)
		children.get(i).removeEmptyPhrase( );
	}
  }
}

PARSER_END(FreeformQueryParser)

/*****************************************************************************
 * Tokenization rules begin here.
 ****************************************************************************/

TOKEN : 
{
  // reserved words (meaningful outside phrases)
  <AND: "AND" | "&">
| <OR: "OR" | "|">
| <NOT: "NOT" | "-">
| <PLUS: "+">
| <QUOTE: "\"">
| <COLON: ":">
| <OPEN_PAREN: "(">
| <CLOSE_PAREN: ")">
  
  // basic word: a SubQuery of digits & letters
| <BASIC: (<LETTER>|<DIGIT>)+ >

  // internal apostrophes: O'Reilly, you're, O'Reilly's
  // use a post-filter to remove possesives
| <APOSTROPHE: <ALPHA> ("'" <ALPHA>)+ >

  // acronyms: U.S.A., I.B.M., etc.
  // use a post-filter to remove dots
| <ACRONYM: <ALPHA> "." (<ALPHA> ".")+ >

  // company names like AT&T and Excite@Home.
| <COMPANY: <ALPHA> ("&"|"@") <ALPHA> >

  // email addresses
| <EMAIL: <ALPHANUM> (("."|"-"|"_") <ALPHANUM>)* "@" <ALPHANUM> (("."|"-") <ALPHANUM>)+ >

  // hostname
| <HOST: <ALPHANUM> ("." <ALPHANUM>)+ >

  // floating point, serial, model numbers, ip addresses, etc.
  // every other segment must have at least one digit
| <NUM: (<ALPHANUM> <P> <HAS_DIGIT> 
       | <HAS_DIGIT> <P> <ALPHANUM> 
       | <ALPHANUM> (<P> <HAS_DIGIT> <P> <ALPHANUM>)+ 
       | <HAS_DIGIT> (<P> <ALPHANUM> <P> <HAS_DIGIT>)+ 
       | <ALPHANUM> <P> <HAS_DIGIT> (<P> <ALPHANUM> <P> <HAS_DIGIT>)+
       | <HAS_DIGIT> <P> <ALPHANUM> (<P> <HAS_DIGIT> <P> <ALPHANUM>)+
       )
  >

| <SYMBOL: 
     [
      // Monetary symbols
      "\u0024", // Dollar
      "\u00a2", // Cent
      "\u00a3", // Pound Sterling
      "\u00a4", // currency symbol
      "\u00a5", // Yen
      "\u0192", // Florin currency symbol (Dutch)
      "\u20a3", // Franc
      "\u20a4", // Lira
      "\u20a7", // Peseta
      "\u20ac", // Euro
      
      // Fractions
      "\u00bc", // one quarter
      "\u00bd", // one half
      "\u00be", // three quarters
      "\u2153", // one third
      "\u2154", // two thirds
      "\u2155", // one fifth
      "\u2156", // two fifths
      "\u2157", // three fifths
      "\u2158", // four fifths
      "\u2159", // one sixth
      "\u215a", // five sixths
      "\u215b", // one eighth
      "\u215c", // three eighths
      "\u215d", // five eighths
      "\u215e", // seven eighths
      
      // Math symbols
      "\u002b", // plus
      "\u2212", // minus
      "\u003d", // equals
      "\u2260", // not equal
      "\u003c", // less than
      "\u003e", // greater than
      "\u2264", // less than or equal
      "\u2265", // greater than or equal
      "\u00b1", // plus/minus
      "\u00d7", // multiply
      "\u00f7", // divide
      "\u2219", // period-centered bullet operator
      "\u00b7", // mid-dot (same as period-centered bullet operator)
      "\u007e", // tilde
      "\u005e", // circumflex
      "\u00b0", // degree
      "\u00ac", // logical not
      "\u2248", // approximately equal
      "\u00b5", // micro
      "\u221e", // infinity
      "\u2202", // partial differential
      "\u220f", // product
      "\u03c0", // lower-case greek pi
      "\u222b", // integral
      "\u2126", // ohm
      "\u221a", // radical
      "\u2206", // increment
      "\u2211", // summation
      "\u25ca", // lozenge
      "\u212e", // estimate
      "\u2032", // single prime
      "\u2033", // double prime
      "\u2116", // numero
      
      // Other
      "\u00ae", // registered trademark
      "\u00a9", // copyright
      "\u2122"  // trademark
     ]
  >
    	
| <#ALPHANUM: (<LETTER>|<DIGIT>)+ >

| <#P: ("_"|"/"|"."|",") >
| <#HAS_DIGIT:					  // at least one digit
    (<LETTER>|<DIGIT>)*
    <DIGIT>
    (<LETTER>|<DIGIT>)*
  >
  
| < #ALPHA: (<LETTER>)+>
| < #LETTER:					  // unicode letters
      [
       "\u0041"-"\u005a",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff"
      ]
  >
| < CJK:                                          // non-alphabets
      [
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
| < #DIGIT:					  // unicode digits
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

SKIP : {					  // skip unrecognized chars
 <NOISE: ~[] >
}

/*****************************************************************************
 * Parser begins here. The grammar builds from the bottom up, beginning with
 * a Term, followed by things that use Term, etc. The root of the grammar
 * is Query, at the very end.
 ****************************************************************************/

/**
 * In general a term is just a single word. But it can also be an email
 * address, symbol, number, etc.
 */
FNode Term():
{}
{
  ( <BASIC> |
    <APOSTROPHE> |
    <ACRONYM> |
    <COMPANY> |
    <EMAIL> |
    <HOST> |
    <NUM> |
    <SYMBOL> |
    <CJK>
  )
  {
    return new FNode("term", token.image);
  }
}

/**
 * A phrase is a quoted string of terms (but we also take care not to barf on
 * reserved words).
 */
FNode Phrase():
{
  FNode phrase = new FNode("phrase");
  FNode term;
}
{
  (
    <QUOTE>
    (   term = Term() { phrase.add(term); }
      | (
          <AND> | <OR> | <NOT> | <PLUS> | <COLON> | <OPEN_PAREN> | <CLOSE_PAREN>
          {}
        )
    )*
    <QUOTE>
  ) 
  { 
    return phrase; 
  }
}

/**
 * You can stick "not" in front of something to negate it. There is post-
 * processing in the Query() production (at the end) to guarantee that each
 * NOT is actually part of an AND-NOT.
 */
FNode Not():
{
  FNode node;
  FNode kid;
}
{
  ( <NOT> kid=Component() )
  {
    // Handle double-not
    if (kid.name == "not") {
      assert kid.children.size() == 1;
      return kid.children.get(0);
    }
    node = new FNode("not");
    node.add(kid);
    return node;
  }
}

/**
 * We allow parenthesized sub-expressions for grouping
 */
FNode ParenSeq():
{
  FNode node;
}
{
  ( <OPEN_PAREN> node=SubQuery() <CLOSE_PAREN> )
  { return node; }
}

/**
 * A component of a query is a phrase, term, parenthesized sequence, or a
 * "not" clause. It can be preceded by an optional field specification.
 */
FNode Component():
{
  String field = null;
  FNode node;
}
{
  // Ignore any "+" symbols we find. People use these in Google to specify that
  // they want to "require" the next term, but we always require terms so we
  // can safely ignore it.
  //
  ( <PLUS> {} )*
  
  // Optional field specifier
  ( LOOKAHEAD(2) 
    node=Term() <COLON> 
    { field = node.text; } 
  )* 
  
  (   node = Phrase() 
    | node = Term() 
    | node = ParenSeq()
    | node = Not()
  )
  {
    if (field != null)
      node.field = field;
    return node;
  }
}

/**
 * A sequence of components, separated by "OR" or "|"
 */
FNode ORs():
{
  FNode node = new FNode("or");
  FNode kid;
}
{
  ( kid = Component() { node.add(kid); }
    ( <OR>
      kid=Component() { node.add(kid); }
    )*
  )
  { return node.promoteSingle(); }
}

/**
 * A sequence of terms (optionally separated by "AND" or "&") is AND-ed together.
 * As in Google, "AND" binds more loosely than "OR", so that A AND B OR C should
 * be grouped like this: A AND (B OR C).
 */
FNode ANDs():
{
  FNode node = new FNode("and");
  FNode kid;
}
{
  ( kid=ORs() { node.add(kid); }
    ( (<AND>)*
      kid=ORs() { node.add(kid); }
    )*
  )
  { return node.promoteSingle(); }
}

/**
 * A single sub-query (can be contained in a paren expr) 
 */
FNode SubQuery():
{
  FNode node;
}
{
  node=ANDs() { return node; }
}

/**
 * The entire query, which consists of a single sub-query. We apply additional
 * processing to ensure proper structure.
 */
FNode Query():
{
  FNode sub;
}
{
  sub = SubQuery() 
  { 
    // Create the final wrapper node.
    FNode query = new FNode("query");
    query.add(sub);
    
    // Propagate field names from left to right, and from children to parent.
    // Also assign "serverChoice" at the highest level we're forced to.
    //
    query.resolveFields(0);

    // Guarantee that every NOT is part of a AND-NOT
    query.fixNots();

    // 2009/7/24 - MAR - Post-process queries in an attempt to do a better
    //		job of handling query components of the form "field:value".
    query = query.fixDC( );
    
    // All done!
    return query;
  }
}

