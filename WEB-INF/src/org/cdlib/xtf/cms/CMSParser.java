/* Generated By:JavaCC: Do not edit this line. CMSParser.java */
package org.cdlib.xtf.cms;

public class CMSParser implements CMSParserConstants {

  final public String parse() throws ParseException {
  String s;
    s = expr();
    jj_consume_token(0);
                     {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String expr() throws ParseException {
  String s;
    s = or();
             {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String or() throws ParseException {
  StringBuffer buf = new StringBuffer( 80 );
  int count = 0;
  String s;
    s = and();
              buf.append(s);
              count++;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(OR);
      s = and();
                     if( count == 1 )
                        buf.insert( 0, "<or>" );
                     buf.append( s );
                     count++;
    }
    if( count > 1 )
      buf.append( "</or>" );
    {if (true) return buf.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String and() throws ParseException {
  StringBuffer buf = new StringBuffer( 80 );
  int count = 0;
  String s;
    s = nots();
               buf.append(s);
               count++;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
      s = nots();
                       if( count == 1 )
                          buf.insert( 0, "<and>" );
                       buf.append( s );
                       count++;
    }
    if( count > 1 )
      buf.append( "</and>" );
    {if (true) return buf.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String nots() throws ParseException {
  StringBuffer buf = new StringBuffer( 80 );
  int count = 0;
  String s;
    s = series();
                 buf.append( s );
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(NOT);
      s = series();
                         if( count == 0 )
                            buf.insert( 0, "<and>" );
                         buf.append( "<not>" + s + "</not>" );
                         count++;
    }
    if( count > 0 )
      buf.append( "</and>" );
    {if (true) return buf.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String series() throws ParseException {
  StringBuffer buf = new StringBuffer( 80 );
  int count = 0;
  String s;
    s = single();
                 buf.append(s);
                 count++;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BASIC:
      case APOSTROPHE:
      case ACRONYM:
      case COMPANY:
      case EMAIL:
      case HOST:
      case NUM:
      case SYMBOL:
      case CJK:
      case 21:
      case 23:
      case 24:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      s = single();
                   if( count == 1 )
                      buf.insert( 0, "<all>" );
                   buf.append( s );
                   count++;
    }
    if( count > 1 )
      buf.append( "</all>" );
    {if (true) return buf.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String single() throws ParseException {
                    String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASIC:
    case APOSTROPHE:
    case ACRONYM:
    case COMPANY:
    case EMAIL:
    case HOST:
    case NUM:
    case SYMBOL:
    case CJK:
      s = term();
                   {if (true) return s;}
      break;
    case 23:
    case 24:
      s = phrase();
                   {if (true) return s;}
      break;
    case 21:
      jj_consume_token(21);
      s = expr();
      jj_consume_token(22);
                           {if (true) return s;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String phrase() throws ParseException {
  StringBuffer buf = new StringBuffer( 80 );
  buf.append( "<phrase>" );
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
      jj_consume_token(23);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BASIC:
        case APOSTROPHE:
        case ACRONYM:
        case COMPANY:
        case EMAIL:
        case HOST:
        case NUM:
        case SYMBOL:
        case CJK:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        s = term();
                   buf.append(s);
      }
      jj_consume_token(23);
      buf.append( "</phrase>" ); {if (true) return buf.toString();}
      break;
    case 24:
      jj_consume_token(24);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BASIC:
        case APOSTROPHE:
        case ACRONYM:
        case COMPANY:
        case EMAIL:
        case HOST:
        case NUM:
        case SYMBOL:
        case CJK:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        s = term();
                   buf.append(s);
      }
      jj_consume_token(24);
      buf.append( "</phrase>" ); {if (true) return buf.toString();}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String term() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASIC:
      token = jj_consume_token(BASIC);
      break;
    case APOSTROPHE:
      token = jj_consume_token(APOSTROPHE);
      break;
    case ACRONYM:
      token = jj_consume_token(ACRONYM);
      break;
    case COMPANY:
      token = jj_consume_token(COMPANY);
      break;
    case EMAIL:
      token = jj_consume_token(EMAIL);
      break;
    case HOST:
      token = jj_consume_token(HOST);
      break;
    case NUM:
      token = jj_consume_token(NUM);
      break;
    case SYMBOL:
      token = jj_consume_token(SYMBOL);
      break;
    case CJK:
      token = jj_consume_token(CJK);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return "<term>" + token.toString() + "</term>";}
    throw new Error("Missing return statement in function");
  }

  public CMSParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x8,0x4,0x10,0x1a41fe0,0x1a41fe0,0x41fe0,0x41fe0,0x1800000,0x41fe0,};
   }

  public CMSParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public CMSParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public CMSParser(CMSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public void ReInit(CMSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[25];
    for (int i = 0; i < 25; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
