/**
 * Copyright (c) 2005, Regents of the University of California
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *   this list of conditions and the following disclaimer in the documentation 
 *   and/or other materials provided with the distribution.
 * - Neither the name of the University of California nor the names of its
 *   contributors may be used to endorse or promote products derived from this 
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

options {
  STATIC = false;
  UNICODE_INPUT = true;
  //USER_CHAR_STREAM = true;
  OPTIMIZE_TOKEN_MANAGER = true;
}

PARSER_BEGIN( CMSParser )

package org.cdlib.xtf.cms;

public class CMSParser
{
} // class CMSParser

PARSER_END( CMSParser )

SKIP: 
{
 <NOISE: ~["\"", "\'", "(", ")"] >
}

TOKEN:
{
  <AND: "and">
  
| <OR: "or">

| <NOT: "not">

  // basic word: a sequence of digits & letters
| <BASIC: <ALPHANUM> >

  // internal apostrophes: O'Reilly, you're, O'Reilly's
  // use a post-filter to remove possesives
| <APOSTROPHE: <ALPHA> ("'" <ALPHA>)+ >

  // acronyms: U.S.A., I.B.M., etc.
  // use a post-filter to remove dots
| <ACRONYM: <ALPHA> "." (<ALPHA> ".")+ >

  // company names like AT&T and Excite@Home.
| <COMPANY: <ALPHA> ("&"|"@") <ALPHA> >

  // email addresses
| <EMAIL: <ALPHANUM> (("."|"-"|"_") <ALPHANUM>)* "@" <ALPHANUM> (("."|"-") <ALPHANUM>)+ >

  // hostname
| <HOST: <ALPHANUM> ("." <ALPHANUM>)+ >

  // floating point, serial, model numbers, ip addresses, etc.
  // every other segment must have at least one digit
| <NUM: (<ALPHANUM> <P> <HAS_DIGIT>
       | <HAS_DIGIT> <P> <ALPHANUM>
       | <ALPHANUM> (<P> <HAS_DIGIT> <P> <ALPHANUM>)+
       | <HAS_DIGIT> (<P> <ALPHANUM> <P> <HAS_DIGIT>)+
       | <ALPHANUM> <P> <HAS_DIGIT> (<P> <ALPHANUM> <P> <HAS_DIGIT>)+
       | <HAS_DIGIT> <P> <ALPHANUM> (<P> <HAS_DIGIT> <P> <ALPHANUM>)+
       )
  >

| <SYMBOL:
     [
      // Monetary symbols
      "\u0024", // Dollar
      "\u00a2", // Cent
      "\u00a3", // Pound Sterling
      "\u00a4", // currency symbol
      "\u00a5", // Yen
      "\u0192", // Florin currency symbol (Dutch)
      "\u20a3", // Franc
      "\u20a4", // Lira
      "\u20a7", // Peseta
      "\u20ac", // Euro
      
      // Fractions
      "\u00bc", // one quarter
      "\u00bd", // one half
      "\u00be", // three quarters
      "\u2153", // one third
      "\u2154", // two thirds
      "\u2155", // one fifth
      "\u2156", // two fifths
      "\u2157", // three fifths
      "\u2158", // four fifths
      "\u2159", // one sixth
      "\u215a", // five sixths
      "\u215b", // one eighth
      "\u215c", // three eighths
      "\u215d", // five eighths
      "\u215e", // seven eighths
      
      // Math symbols
      "\u002b", // plus
      "\u2212", // minus
      "\u003d", // equals
      "\u2260", // not equal
      "\u003c", // less than
      "\u003e", // greater than
      "\u2264", // less than or equal
      "\u2265", // greater than or equal
      "\u00b1", // plus/minus
      "\u00d7", // multiply
      "\u00f7", // divide
      "\u2219", // period-centered bullet operator
      "\u00b7", // mid-dot (same as period-centered bullet operator)
      "\u007e", // tilde
      "\u005e", // circumflex
      "\u00b0", // degree
      "\u00ac", // logical not
      "\u2248", // approximately equal
      "\u00b5", // micro
      "\u221e", // infinity
      "\u2202", // partial differential
      "\u220f", // product
      "\u03c0", // lower-case greek pi
      "\u222b", // integral
      "\u2126", // ohm
      "\u221a", // radical
      "\u2206", // increment
      "\u2211", // summation
      "\u25ca", // lozenge
      "\u212e", // estimate
      "\u2032", // single prime
      "\u2033", // double prime
      "\u2116", // numero
      
      // Other
      "\u00ae", // registered trademark
      "\u00a9", // copyright
      "\u2122"  // trademark
     ]
  >
      
| <#ALPHANUM: (<LETTER>|<DIGIT>|"*"|"?")+ >

| <#P: ("_"|"/"|"."|",") >
| <#HAS_DIGIT:            // at least one digit
    (<LETTER>|<DIGIT>)*
    <DIGIT>
    (<LETTER>|<DIGIT>)*
  >
  
| < #ALPHA: (<LETTER>)+>
| < #LETTER:            // unicode letters
      [
       "\u0041"-"\u005a",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff"
      ]
  >
| < CJK:                                          // non-alphabets
      [
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
| < #DIGIT:           // unicode digits
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
| < #XTF_SPECIAL:           // unicode letters
      [
        "\uEBEB",  // start-of-field marker
        "\uEE1D"   // end-of-field marker
      ]
  >
}

String parse(): 
{ 
  String s;
}
{
  s = expr() <EOF> { return s; }
}

String expr(): 
{
  String s;
}
{
  s = or() { return s; }
}

String or() :
{
  StringBuffer buf = new StringBuffer( 80 );
  int count = 0;
  String s;
}
{
  s = and() { buf.append(s); 
              count++; 
            }
  
  ( <OR> s = and() { if( count == 1 )
                        buf.insert( 0, "<or>" );
                     buf.append( s );
                     count++;
                   } 
  )*
  
  { 
    if( count > 1 )
      buf.append( "</or>" ); 
    return buf.toString(); 
  }
}

String and() :
{
  StringBuffer buf = new StringBuffer( 80 );
  int count = 0;
  String s;
}
{
  s = nots() { buf.append(s); 
               count++; 
             }
  
  ( <AND> s = nots() { if( count == 1 )
                          buf.insert( 0, "<and>" );
                       buf.append( s );
                       count++;
                     } 
  )*
  
  { 
    if( count > 1 )
      buf.append( "</and>" ); 
    return buf.toString(); 
  }
}

String nots() :
{
  StringBuffer buf = new StringBuffer( 80 );
  int count = 0;
  String s;
}
{
  s = series() { buf.append( s ); }
  
  ( <NOT> s = series() { if( count == 0 )
                            buf.insert( 0, "<and>" );
                         buf.append( "<not>" + s + "</not>" );
                         count++;
                       } 
  )*
  
  { 
    if( count > 0 )
      buf.append( "</and>" ); 
    return buf.toString(); 
  }
}

String series() :
{
  StringBuffer buf = new StringBuffer( 80 );
  int count = 0;
  String s;
}
{
  s = single() { buf.append(s); 
                 count++; 
               }
  
  ( s = single() { if( count == 1 )
                      buf.insert( 0, "<all>" );
                   buf.append( s );
                   count++;
                 } 
  )*
  
  { 
    if( count > 1 )
      buf.append( "</all>" ); 
    return buf.toString(); 
  }
}

String single() : { String s; }
{
    s = term()   { return s; } 
  | s = phrase() { return s; }
  | ( "(" s = expr() ")" { return s; } )
}

String phrase(): 
{
  StringBuffer buf = new StringBuffer( 80 );
  buf.append( "<phrase>" );
  String s;
}
{
  ( "\""
    ( s = term() { buf.append(s); } )*
    "\""
    { buf.append( "</phrase>" ); return buf.toString(); }
  )
  |
  ( "'"
    ( s = term() { buf.append(s); } )*
    "'"
    { buf.append( "</phrase>" ); return buf.toString(); }
  )
}

String term(): 
{
  Token token;
}
{
  ( token = <BASIC> |
    token = <APOSTROPHE> |
    token = <ACRONYM> |
    token = <COMPANY> |
    token = <EMAIL> |
    token = <HOST> |
    token = <NUM> |
    token = <SYMBOL> |
    token = <CJK>
   ) { return "<term>" + token.toString() + "</term>"; } 
}
